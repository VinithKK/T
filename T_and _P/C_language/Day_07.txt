Ex-01 Stack Operation
---------------------
#include <stdio.h>
#define MAX 20
int stack[MAX],top=-1,choice,n;
void push();
void pop();
void display();

int main() {
      printf("___________________");
      printf("\nStack Operation.\n");
      printf("___________________\n\n\n");
    do
    {
        printf("---------------------------------------");
        printf("\n1.Push\t2.Pop\t3.Display\t4.Exit\n");
        printf("---------------------------------------\n");
        printf("\n Enter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            push();
            break;
            
            case 2:
            pop();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            exit(0);
            break;
            
            default:
            printf("\n\n!!!Please enter valid option!!!.\n");
            break;
        }
    }
    while(choice!=4);
    {
    exit(0);
    }
    return 0;
    
}


void push()
{
    int val;
    if(MAX-1==top)
    {
    printf("\n\nStack Overflow.");
    }
    else
    {
        printf("\n\nEnter the element to push :");
        scanf("%d",&val);
        top=top+1;
        stack[top]=val;
    }
}
     
void pop()
{  
    if(top==-1)
    {
        printf("\n\nStack Underflow.");
    }
    else
    {   printf("\nPopped element is %d \n",stack[top]);
        top=top-1;
    }
}

void display()
{
    int a=top;
    if(a==-1)
    {
        printf("\n\nStack Empty!!!.\n");
    }
    else
    {
        printf("\nStack Elements :");
       while(a!=-1)
        {
            printf("%d\t",stack[a]);
            a=a-1;
        }
        
    }
    printf("\n");
}


Output:
-------

___________________
Stack Operation.
___________________


---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 1
 Enter the element to push :55
 ---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 1
 Enter the element to push :65
 ---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 8
 !!!Please enter valid option!!!.
---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 1
 Enter the element to push :75
 ---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 3
 Stack Elements :75	65	55	
---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 2
 Popped element is 75 
---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 3
 Stack Elements :65	55
 
---------------------------------------
1.Push	2.Pop	3.Display	4.Exit
---------------------------------------

 Enter your choice: 4
   

----------------------------------------------------------------------------------------

Ex-02 Queue operation
----------------------
#include <stdio.h>
#include <stdlib.h>
#define MAX 20
int queue[MAX],front=-1,rear=-1,choice,n;
void insert();
void delete1();
void display();
int main() {
      printf("___________________\n");
      printf("Queue Operation.");
      printf("\n___________________\n\n\n\n");
    do
    {
        printf("\n\n-------------------------------------------------");
        printf("\n1.Insert\t2.Delete\t3.Display\t4.Exit\n");
        printf("-------------------------------------------------\n");
        printf("\n \nEnter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            insert();
            break;
            
            case 2:
            delete1();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            exit(0);
            break;
            
            default:
            printf("\n\n!!!Please enter valid option.!!!\n\n");
            break;
        }
    }
    while(choice!=4);
    {
    exit(0);
    }
    return 0;
    
}


void insert()
{
    int val;
    if(rear==MAX-1)
    {
        printf("\nCan't insert element.");
    }
    else if(front==-1&&rear==-1)
    {
        front=0;
        rear=0;
    }
    else
    {
        rear=rear+1;
    }
	printf("\n\nEnter the element to insert :");
    scanf("%d",&val);
    queue[rear]=val;
    
printf("\n");
}

void delete1()
{
    int d;
    d=front;
    if(front==-1 || front>rear)
    {
        printf("\nCan't delete the element.");
    }
    else if(front==rear)
    {	
	front=-1;
	rear=-1;
    }
    else
    {   
        front=front+1;
    }
    printf("%d element is deleted.",queue[d]);
}

void display()
{
    if(rear==-1)
    {
        printf("\nQueue empty!!!.");
    }
    else{
    printf("\nThe queue elements : ");
    for(int i=front;i<=rear;i++)
    {
        printf("%d\t",queue[i]);
    }
    }
    printf("\n");
}


Output:
-------

___________________
Queue Operation.
___________________



----------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
----------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :10
-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
-------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :20
----------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
----------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :30
----------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
----------------------------------------------------

 
Enter your choice: 3
The queue elements : 10	20 30	


----------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
----------------------------------------------------

 
Enter your choice: 2
10 element is deleted.

----------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
----------------------------------------------------

 
Enter your choice: 3
The queue elements : 20	30	


----------------------------------------------------
1.Insert	2.Delete	3.Display	4.Exit
----------------------------------------------------

 
Enter your choice: 4


---------------------------------------------------------------------------------------------------------------------------------------

Ex-03 To sort the stack elements in ascending order.
----------------------------------------------------
#include <stdio.h>
#define MAX 20
int stack[MAX],top=-1,choice,n,stack1[MAX];
void push();
void pop();
void sort();
void display();

int main() {
      printf("___________________");
      printf("\nStack Operation.\n");
      printf("___________________\n\n\n");
    do
    {
        printf("--------------------------------------------");
        printf("\n1.Push\t2.Pop\t3.Display\t4.Sort\t5.Exit\n");
        printf("--------------------------------------------\n");
        printf("\n Enter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            push();
            break;
            
            case 2:
            pop();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            sort();
            break;
            
            case 5:
            exit(0);
            break;
            
            default:
            printf("\n\nPlease enter valid option.");
            break;
        }
    }
    while(choice!=5);
    {
    exit(0);
    }
    return 0;
    
}


void push()
{
    int val;
    if(MAX-1==top)
    {
    printf("\n\nStack Overflow.");
    }
    else
    {
        printf("\n\nEnter the element to push :");
        scanf("%d",&val);
        top=top+1;
        stack[top]=val;
    }
}
     
void pop()
{  
    if(top==-1)
    {
        printf("\n\nStack Underflow.");
    }
    else
    {   printf("\nPopped element is %d \n",stack[top]);
        top=top-1;
    }
}
void sort()
{
    int temp,i,j,t,h;
    t=top;
    h=top;
    while(t!=-1)
        {
            stack1[t]=stack[t];
            t=t-1;
        }
    for(i=0;i<h;i++)
        {
        for(j=i+1;j<=h;j++)
            {
                if(stack1[i]<stack1[j])
                {
                    temp=stack1[j];
                    stack1[j]=stack1[i];
                    stack1[i]=temp;
                }
            }
        }
    printf("\nStack elements in ascending order : ");
    while(h!=-1)
        {
            printf("%d\t",stack1[h]);
            h=h-1;
        }
    printf("\n");
}


void display()
{
    int a=top;
    if(a==-1)
    {
        printf("\n\nStack Empty!!!.\n");
    }
    else
    {
        printf("\nStack Elements :");
       while(a!=-1)
        {
            printf("%d\t",stack[a]);
            a=a-1;
        }
    }
    printf("\n");
}

Output:
-------
___________________
Stack Operation.
___________________


--------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :7
 -------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :5
 --------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :6
 --------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 3
 Stack Elements :6 5 7	
--------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 4
 Stack elements in ascending order : 5	6 7	
--------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 3
 Stack Elements :6 5 7	
--------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------
 Enter your choice: 2
 Popped element is 6 
--------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 3
 Stack Elements :5 7	
--------------------------------------------
1.Push	2.Pop	3.Display	4.Sort	5.Exit
--------------------------------------------

 Enter your choice: 5
 

       
---------------------------------------------------------------------------------------------------------------------------------------------------------

Ex-04 Queue with reverse_elements option.
----------------------------------------

#include <stdio.h>
#include <stdlib.h>
#define MAX 20
int queue[MAX],front=-1,rear=-1,choice,n;
void insert();
void delete1();
void display();
void queue_rev();
int main() {
      printf("___________________\n");
      printf("Queue Operation.");
      printf("\n___________________\n\n\n\n");
    do
    {
        printf("\n\n-------------------------------------------------------");
         printf("\n1.Insert\t2.Delete\t3.Display\t4.Queue_Reverse\t 5.Exit\n");
        printf("----------------------------------------------------------\n");
        printf("\n \nEnter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            insert();
            break;
            
            case 2:
            delete1();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            queue_rev();
            break;
            
            case 5:
            exit(0);
            break;
            
            default:
            printf("\n\nPlease enter valid option.");
            break;
        }
    }
    while(choice!=5);
    {
    exit(0);
    }
    return 0;
    
}


void insert()
{
    int val;
    if(rear==MAX-1)
    {
        printf("\nCan't insert element.");
    }
    else if(front==-1&&rear==-1)
    {
        front=0;
        rear=0;
    }
    else
    {
        rear=rear+1;
    }
	printf("\n\nEnter the element to insert :");
    scanf("%d",&val);
    queue[rear]=val;
    
printf("\n");
}

void delete1()
{
    int d;
    d=front;
    if(front==-1 || front>rear)
    {
        printf("\nCan't delete the element.");
    }
    else if(front==rear)
    {	
	front=-1;
	rear=-1;
    }
    else
    {   
        front=front+1;
    }
    printf("%d element is deleted.",queue[d]);
}

void queue_rev()
{
    if(rear==-1)
    {
        printf("\nQueue empty!!!.");
    }
    else{
    printf("\nThe queue elements in reverse order : ");
    for(int i=rear;i>=front;i--)
    {
        printf("%d\t",queue[i]);
    }
    }
}

void display()
{
    if(rear==-1)
    {
        printf("\nQueue empty!!!.");
    }
    else{
    printf("\nThe queue elements : ");
    for(int i=front;i<=rear;i++)
    {
        printf("%d\t",queue[i]);
    }
    }
    printf("\n");
}


Output:
------
___________________
Queue Operation.
___________________



-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :10
-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :20
-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :30
-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 3
The queue elements : 10	20	30	


-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 4
The queue elements in reverse order : 30	20	10	

-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 2
10 element is deleted.

-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 3
The queue elements : 20	30	


-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 4
The queue elements in reverse order : 30	20	

-------------------------------------------------------
1.Insert	2.Delete	3.Display	4.Queue_Reverse	 5.Exit
----------------------------------------------------------

 
Enter your choice: 5


----------------------------------------------------------------------------------------------------------------------------------------------

Ex-05 To find minimum element in stack.
--------------------------------------

#include <stdio.h>
#define MAX 20
int stack[MAX],top=-1,choice,n;
void push();
void pop();
void display();
void min();
int main() {
      printf("___________________");
      printf("\nStack Operation.\n");
      printf("___________________\n\n\n");
    do
    {
        printf("--------------------------------------------");
        printf("\n1.Push\t2.Pop\t3.Display\t4.Min_Element\t5.Exit\n");
        printf("--------------------------------------------\n");
        printf("\n Enter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            push();
            break;
            
            case 2:
            pop();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            min();
            break;
            
            case 5:
            exit(0);
            break;
            
            default:
            printf("\n\n!!!Please enter valid option!!!.\n");
            break;
        }
    }
    while(choice!=5);
    {
    exit(0);
    }
    return 0;
    
}


void push()
{
    int val;
    if(MAX-1==top)
    {
    printf("\n\nStack Overflow.");
    }
    else
    {
        printf("\n\nEnter the element to push :");
        scanf("%d",&val);
        top=top+1;
        stack[top]=val;
    }
}
     
void pop()
{  
    if(top==-1)
    {
        printf("\n\nStack Underflow.");
    }
    else
    {   printf("\nPopped element is %d \n",stack[top]);
        top=top-1;
    }
}

void display()
{
    int a=top;
    if(a==-1)
    {
        printf("\n\nStack Empty!!!.\n");
    }
    else
    {
        printf("\nStack Elements :");
       while(a!=-1)
        {
            printf("%d\t",stack[a]);
            a=a-1;
        }
        
    }
    printf("\n");
}
void min()
{
    int r=top,min_ele=stack[0];
    if(r==-1)
    {
        printf("\n\nStack Empty,So Can't Find Minimum Element.\n");
    }
    else
    {
       while(r!=-1)
        {   
            if(stack[r]<min_ele)
            {
                min_ele=stack[r];
            }
            r=r-1;
        }
      printf("\n\nThe Minimum element is : %d",min_ele);
    }
    printf("\n");
}



Output:
-------
___________________
Stack Operation.
___________________


--------------------------------------------
1.Push	2.Pop	3.Display	4.Min_Element	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :55
 --------------------------------------------
1.Push	2.Pop	3.Display	4.Min_Element	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :22
 --------------------------------------------
1.Push	2.Pop	3.Display	4.Min_Element	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :66
 --------------------------------------------
1.Push	2.Pop	3.Display	4.Min_Element	5.Exit
--------------------------------------------

 Enter your choice: 1
 Enter the element to push :45
 --------------------------------------------
1.Push	2.Pop	3.Display	4.Min_Element	5.Exit
--------------------------------------------

 Enter your choice: 3
 Stack Elements :45	66	22	55	
--------------------------------------------
1.Push	2.Pop	3.Display	4.Min_Element	5.Exit
--------------------------------------------

 Enter your choice: 4
 The Minimum element is : 22


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------
Ex-06 Write a C program to implement a stack that support push,pop,middle element
----------------------------------------------------------------------------

Expected Output:

Stack elements :88 15 26 32 23
Middle element:26

Delete the middle element of the said stack:
Stack elements :88 15 32 23
Middle element:15




#include <stdio.h>
#define MAX 20
int stack[MAX],top=-1,choice,n;
void push();
void pop();
void display();
void middelete();

int main() {
      printf("___________________");
      printf("\nStack Operation.\n");
      printf("___________________\n\n\n");
    do
    {
        printf("---------------------------------------");
        printf("\n1.Push\t2.Pop\t3.Display\t4.Delete at mid\t5.Exit\n"); 
        printf("---------------------------------------\n");
        printf("\n Enter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            push();
            break;
            
            case 2:
            pop();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            middelete();
            break;
            
            case 5:
            exit(0);
            break;
            
            default:
            printf("\n\n!!!Please enter valid option!!!.\n");
            break;
        }
    }
    while(choice!=5);
    {
    exit(0);
    }
    return 0;    
}

void push()
{
    int val;
    if(MAX-1==top)
    {
    printf("\n\nStack Overflow.");
    }
    else
    {
        printf("\n\nEnter the element to push :");
        scanf("%d",&val);
        top=top+1;
        stack[top]=val;
    }
}
     
void pop()
{  
    if(top==-1)
    {
        printf("\n\nStack Underflow.");
    }
    else
    {   printf("\nPopped element is %d \n",stack[top]);
        top=top-1;
    }
}

void display()
{
    int a=top;
    if(a==-1)
    {
        printf("\n\nStack Empty!!!.\n");
    }
    else
    {
        printf("\nStack Elements :");
        while(a!=-1)
        {
            printf("%d\n",stack[a]);
            a=a-1;
        }        
    }
    printf("\n");
}

void middelete() {
	int mid = top / 2, i;
	for(i = mid; i < top; i++) {
		stack[i] = stack[i + 1];
	}
	stack[top--] = '\0';
	display();
}




Output:
------

___________________
Stack Operation.
___________________


------------------------------------------------------
1.Push  2.Pop   3.Display       4.Delete at mid 5.Exit
------------------------------------------------------

 Enter your choice: 1


Enter the element to push :1
------------------------------------------------------
1.Push  2.Pop   3.Display       4.Delete at mid 5.Exit
------------------------------------------------------

 Enter your choice: 1


Enter the element to push :2
------------------------------------------------------
1.Push  2.Pop   3.Display       4.Delete at mid 5.Exit
------------------------------------------------------

 Enter your choice: 1


Enter the element to push :3
------------------------------------------------------
1.Push  2.Pop   3.Display       4.Delete at mid 5.Exit
------------------------------------------------------

 Enter your choice: 3

Stack Elements :3
2
1

------------------------------------------------------
1.Push  2.Pop   3.Display       4.Delete at mid 5.Exit
------------------------------------------------------

 Enter your choice: 4

Stack Elements :3
1

------------------------------------------------------
1.Push  2.Pop   3.Display       4.Delete at mid 5.Exit
------------------------------------------------------

 Enter your choice: 5


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ex-07 Write a C program to compute the avg value of the element .
-------------------------------------------------------------------
Expected Output:

Queue elements are: 1 2 3 4 5
Average of the elements in the queue is :3.000000

Remove 2 elements from the said queue:
Queue elements are : 3 4 5
Average of the elements in the queue is : 4.000000

Insert 3 more elements :
Queue elements are: 3 4 5 300 427 519
Average of the elements in the queue is :219.00



#include <stdio.h>
#include <stdlib.h>
#define MAX 20
int queue[MAX],front=-1,rear=-1,choice,n;
void insert();
void delete1();
void display();
void avg();
int main() {
      printf("___________________\n");
      printf("Queue Operation.");
      printf("\n___________________\n\n\n\n");
    do
    {
        printf("\n\n-------------------------------------------------");
        printf("\n1.Insert\t2.Delete\t3.Display\t4.Average\t5.Exit\n");
        printf("-------------------------------------------------\n");
        printf("\n \nEnter your choice: ");
        scanf("%d",&choice);
    
        switch(choice)
        {
            case 1:
            insert();
            break;
            
            case 2:
            delete1();
            break;
            
            case 3:
            display();
            break;
            
            case 4:
            avg();
            break;
            
            case 5:
            exit(0);
            break;
            
            
            default:
            printf("\n\n!!!Please enter valid option.!!!\n\n");
            break;
        }
    }
    while(choice!=5);
    {
    exit(0);
    }
    return 0;
    
}


void insert()
{
    int val;
    if(rear==MAX-1)
    {
        printf("\nCan't insert element.");
    }
    else if(front==-1&&rear==-1)
    {
        front=0;
        rear=0;
    }
    else
    {
        rear=rear+1;
    }
	printf("\n\nEnter the element to insert :");
    scanf("%d",&val);
    queue[rear]=val;
    
printf("\n");
}

void delete1()
{
    int d;
    d=front;
    if(front==-1 || front>rear)
    {
        printf("\nCan't delete the element.");
    }
    else if(front==rear)
    {	
	front=-1;
	rear=-1;
    }
    else
    {   
        front=front+1;
    }
    printf("%d element is deleted.",queue[d]);
}

void display()
{
    if(rear==-1)
    {
        printf("\nQueue empty!!!.");
    }
    else{
    printf("\nThe queue elements : ");
    for(int i=front;i<=rear;i++)
    {
        printf("%d\t",queue[i]);
    }
    }
    printf("\n");
}


void avg()
{
    int sum=0,len=0;
    float average;
    if(rear==-1)
    {
        printf("\nQueue empty,so can't find average value for elements in queue.");
    }
    else{
    for(int i=front;i<=rear;i++)
    {
        sum=sum+queue[i];
        len++;
    }
    average=sum/len;
    printf("\n\nAverage value is : %f",average);
    }
    printf("\n");
}




Output:
------

___________________
Queue Operation.
___________________



-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :1
-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :2
-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :3
-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :4
-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 1
Enter the element to insert :5
-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 3
The queue elements : 1	2	3	4	5	


-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 4
Average value is : 3.000000


-------------------------------------------------
1.Insert	2.Delete	3.Display	4.Average	5.Exit
-------------------------------------------------

 
Enter your choice: 5


--------------------------------------------------------------------------------------------------------------------------------------